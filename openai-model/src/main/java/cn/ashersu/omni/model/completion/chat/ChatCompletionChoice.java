package cn.ashersu.omni.model.completion.chat;

import com.fasterxml.jackson.annotation.JsonAlias;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A chat completion generated by OpenAI
 */
public class ChatCompletionChoice {

    /**
     * This index of this completion in the returned list.
     */
    private Integer index;

    /**
     * The {@link ChatMessageRole#ASSISTANT} message or delta (when streaming) which was generated
     */
    @JsonAlias("delta")
    private SimpleChatMessage message;

    /**
     * The reason why GPT stopped generating, for example "length".
     */
    @JsonProperty("finish_reason")
    private String finishReason;

    private String logprobs;

    public Integer getIndex() {
        return index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public SimpleChatMessage getMessage() {
        return message;
    }

    public void setMessage(SimpleChatMessage message) {
        this.message = message;
    }

    public String getFinishReason() {
        return finishReason;
    }

    public void setFinishReason(String finishReason) {
        this.finishReason = finishReason;
    }

    public String getLogprobs() {
        return logprobs;
    }

    public void setLogprobs(String logprobs) {
        this.logprobs = logprobs;
    }

    public static Builder Builder() {
        return new Builder();
    }

    public static final class Builder {
        private Integer index;
        private SimpleChatMessage message;
        private String finishReason;
        private String logprobs;

        public Builder index(Integer index) {
            this.index = index;
            return this;
        }

        public Builder message(SimpleChatMessage message) {
            this.message = message;
            return this;
        }

        public Builder finishReason(String finishReason) {
            this.finishReason = finishReason;
            return this;
        }

        public Builder logprobs(String logprobs) {
            this.logprobs = logprobs;
            return this;
        }

        public ChatCompletionChoice build() {
            ChatCompletionChoice chatCompletionChoice = new ChatCompletionChoice();
            chatCompletionChoice.setIndex(index);
            chatCompletionChoice.setMessage(message);
            chatCompletionChoice.setFinishReason(finishReason);
            chatCompletionChoice.setLogprobs(logprobs);
            return chatCompletionChoice;
        }
    }
}